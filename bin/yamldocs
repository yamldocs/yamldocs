#!/usr/bin/env php
<?php

if (php_sapi_name() !== 'cli') {
    exit;
}

$app_root = $source_root = dirname(__DIR__);
$signature = "./bin/yamldocs help";

if (!is_file($app_root . '/vendor/autoload.php')) {
    $app_root = dirname(__DIR__, 4);
    $source_root = $app_root . '/vendor/yamldocs/yamldocs';
    $signature = "./vendor/bin/yamldocs help";
}

require $app_root . '/vendor/autoload.php';

use Minicli\App;
use Minicli\Exception\CommandNotFoundException;
use Yamldocs\BuilderService;
use Yamldocs\YamldocsConfig;

$config = new YamldocsConfig();
$config->load($source_root . '/config.yaml');

$paths = [
    $source_root . '/app/Command',
    '@minicli/command-help'
];

$config->set('app_path', $paths);
$config->set('app_root', $app_root);
$config->set('source_root', $source_root);

if (is_file($app_root . '/yamldocs.yaml')) {
    $config->merge($app_root . '/yamldocs.yaml');
}

$app = new App($config->parameters);
$app->setSignature($signature);
$app->addService('builder', new BuilderService());

try {
    $app->runCommand($argv);
} catch (CommandNotFoundException $notFoundException) {
    $app->error("Command Not Found.");
    return 1;
} catch (Exception $exception) {
    if ($app->config->debug) {
        $app->error("An error occurred:");
        $app->error($exception->getMessage());
    }
    return 1;
} catch (Throwable $e) {
}

return 0;